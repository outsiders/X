/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,32],$V2=[1,34],$V3=[1,35],$V4=[1,36],$V5=[1,20],$V6=[1,25],$V7=[1,21],$V8=[1,22],$V9=[1,26],$Va=[1,14],$Vb=[1,13],$Vc=[1,15],$Vd=[1,37],$Ve=[1,17,41],$Vf=[1,17,25,41],$Vg=[2,37],$Vh=[2,11],$Vi=[1,7,9,11,13,15,17,24,25,40,41],$Vj=[2,22],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,7,9,11,13,15,17,24,25,32,40,41,45],$Vo=[2,31],$Vp=[1,63],$Vq=[1,64],$Vr=[1,66],$Vs=[1,7,9,11,13,15,17,24,25,29,32,35,40,41,45,60,61],$Vt=[1,7,9,11,13,15,17,24,25,29,32,35,37,40,41,43,44,45,60,61],$Vu=[1,7,9,11,13,15,17,24,25,29,40,41,52,55],$Vv=[1,7,9,11,13,15,17,24,25,29,40,41],$Vw=[7,9,11,13,15,24,29,35,40],$Vx=[1,113],$Vy=[7,9,11,13,15,24,40],$Vz=[1,118];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Artical":3,"Paragraph":4,"Definition":5,"Id":6,"ID":7,"Property":8,"PROPERTY":9,"Null":10,"_":11,"String":12,"STRING":13,"Number":14,"NUMBER":15,"Sentence":16,";":17,"Units":18,"Assign":19,"For":20,"If":21,"Internal":22,"FOR":23,"(":24,")":25,"FunctionBlock":26,"Assignable":27,"ArrayUnit":28,",":29,"IF":30,"Unit":31,"ELSE":32,"`":33,"PropertyUnit":34,"=":35,"Array":36,"+=":37,"Value":38,"Operation":39,"{":40,"}":41,"FunctionBlockOrNone":42,".":43,"[":44,"]":45,"Call":46,"&":47,"BasicUnit":48,"Dependencies":49,"ReturnStatement":50,"Arguments":51,"~":52,":":53,"DependencyArray":54,"@":55,"ArgumentArray":56,"ArgumentElement":57,"*":58,"?":59,"+":60,"<":61,"$accept":0,"$end":1},
terminals_: {2:"error",7:"ID",9:"PROPERTY",11:"_",13:"STRING",15:"NUMBER",17:";",23:"FOR",24:"(",25:")",29:",",30:"IF",32:"ELSE",33:"`",35:"=",37:"+=",40:"{",41:"}",43:".",44:"[",45:"]",47:"&",48:"BasicUnit",52:"~",53:":",55:"@",58:"*",59:"?",60:"+",61:"<"},
productions_: [0,[3,1],[3,1],[6,1],[8,1],[10,1],[12,1],[14,1],[4,1],[4,3],[4,2],[16,1],[16,1],[16,1],[16,1],[16,1],[20,9],[20,4],[20,6],[21,3],[21,5],[22,3],[18,1],[18,2],[18,1],[18,2],[19,3],[19,3],[19,3],[19,3],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[42,1],[42,0],[26,1],[38,1],[38,1],[38,1],[34,2],[27,1],[27,5],[27,3],[27,4],[28,1],[28,1],[36,3],[36,3],[46,2],[5,4],[5,3],[5,3],[5,3],[5,2],[5,2],[5,2],[50,2],[49,2],[54,1],[54,3],[51,2],[51,2],[57,1],[57,2],[57,2],[57,3],[57,4],[56,1],[56,3],[39,3],[39,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = ['_main', $$[$0]]
break;
case 2:
return this.$ = $$[$0];
break;
case 3: case 4:
this.$ = yytext
break;
case 5:
this.$ = ['_null']
break;
case 6:
this.$ = ['_string', yytext]
break;
case 7:
this.$ = ['_number', Number(yytext)]
break;
case 8:
if($$[$0]) this.$ = ['_paragraph', [$$[$0]]]; else this.$ = ['_paragraph', []];
break;
case 9:
this.$ = $$[$0-2]; if($$[$0]){$$[$0-2][1].push($$[$0]);}
break;
case 10: case 33: case 34: case 35:
this.$ = $$[$0-1];
break;
case 11: case 12: case 13: case 14: case 32: case 59: case 60:
this.$ = $$[$0];
break;
case 15: case 30: case 31: case 39: case 40: case 41: case 47: case 48:
this.$ = $$[$0]
break;
case 16:
this.$ = ['_for', {start: $$[$0-6], end: $$[$0-4], inc: $$[$0-2], content: $$[$0]}]
break;
case 17:
this.$ = ['_foreach', {array: $$[$0-1], element: $$[$0-2], content: $$[$0]}]
break;
case 18:
this.$ = ['_foreach', {array: $$[$0-1], element: $$[$0-4], index: $$[$0-2], content: $$[$0]}]
break;
case 19:
this.$=['_if', {condition:$$[$0-1], content:$$[$0]}]
break;
case 20:
this.$=['_if',{condition: $$[$0-3], content: $$[$0-2], else: $$[$0]}]
break;
case 21:
yy.setlang($$[$0-1]); this.$ = undefined
break;
case 22:
this.$ = ['_sentence', {config:{},content: [$$[$0]]}];
break;
case 23:
this.$ = $$[$0-1]; $$[$0-1][1].content.push($$[$0])
break;
case 24:
var tmp = {}; tmp[$$[$0][0]] = $$[$0][1];this.$ = ['_sentence', {config: tmp, content: []}];
break;
case 25:
this.$ = $$[$0-1]; $$[$0-1][1].config[$$[$0][0]] = $$[$0][1]
break;
case 26: case 27:
this.$ = ['_assign', [$$[$0-2], $$[$0]]];
break;
case 28:
this.$ = ['_assign', [$$[$0-2], $$[$0]]]
break;
case 29:
this.$ = ['_assign', [$$[$0-2], ['_add', [$$[$0-2], $$[$0]]]]];
break;
case 36:
this.$= $$[$0]
break;
case 37:
this.$ = []
break;
case 38:
var c = $$[$0][1].content; if(c.length == 1 && c[0][0] == '_paragraph'){ this.$ = c[0]; }else{ this.$ = ['_paragraph', [$$[$0]]]; }
break;
case 42:
this.$ = [$$[$0-1], $$[$0]]
break;
case 43:
this.$ = ['_access', [$$[$0]]]
break;
case 44:
this.$ = ['_access', [$$[$0-3], $$[$0]]]
break;
case 45:
this.$ = ['_access', [$$[$0-2], $$[$0]]]
break;
case 46:
this.$ = ['_access', [$$[$0-3], $$[$0-1]]]
break;
case 49:
this.$ = ['_array', [$$[$0-2], $$[$0]]]
break;
case 50:
this.$ = $$[$0-2]; $$[$0-2][1].push($$[$0])
break;
case 51:
this.$ = ['_call', $$[$0]];
break;
case 52:
this.$ = ['_definiton', {deps: $$[$0-3], return: $$[$0-2], args: $$[$0-1], content: $$[$0]}]
break;
case 53:
this.$ = ['_definiton', {deps: $$[$0-2], args: $$[$0-1], content: $$[$0]}]
break;
case 54:
this.$ = ['_definiton', {deps: {function: 1}, return: $$[$0-2], args: $$[$0-1], content: $$[$0]}]
break;
case 55:
this.$ = ['_definiton', {deps: $$[$0-2], return: $$[$0-1], args: {}, content: $$[$0]}]
break;
case 56:
this.$ = ['_definiton', {deps: {function: 1}, args: $$[$0-1], content: $$[$0]}]
break;
case 57:
this.$ = ['_definiton', {deps: $$[$0-1], args: {}, content: $$[$0]}]
break;
case 58:
this.$ = ['_definiton', {deps: {function:1}, return: $$[$0-1], args: {}, content: $$[$0]}]
break;
case 61:
this.$ = {}; this.$[$$[$0]] = 1
break;
case 62:
this.$ = $$[$0-2]; $$[$0-2][$$[$0]] = 1
break;
case 63:
this.$=$$[$0];
break;
case 64:
this.$ = {}
break;
case 65:
this.$ = [$$[$0], {}]
break;
case 66:
this.$ = [$$[$0-1], {type: $$[$0]}]
break;
case 67:
this.$ = [$$[$0-1], {etc: 1}]
break;
case 68:
this.$ = [$$[$0-2], {default: $$[$0]}]
break;
case 69:
this.$ = [$$[$0-3], {type: $$[$0-2], default: $$[$0]}]
break;
case 70:
this.$={}; this.$[$$[$0][0]] = $$[$0][1];
break;
case 71:
this.$=$$[$0-2]; this.$[$$[$0][0]] = $$[$0][1]
break;
case 72:
this.$ = ['_add', [$$[$0-2], $$[$0]]]
break;
case 73:
this.$ = ['_lt', [$$[$0-2], $$[$0]]]
break;
}
},
table: [{3:1,4:2,5:3,6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,16:4,18:8,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:18,30:$V7,31:16,33:$V8,34:17,36:19,38:23,39:24,40:$V9,49:5,50:6,51:7,52:$Va,53:$Vb,55:$Vc},{1:[3]},{1:[2,1],17:$Vd},{1:[2,2]},o($Ve,[2,8]),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,50:38,51:39,42:40,26:41,18:42,31:43,27:44,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9,52:$Va,55:$Vc}),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,26:41,18:42,31:43,27:44,51:45,42:46,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9,55:$Vc}),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,26:41,18:42,31:43,27:44,42:47,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vf,$Vh,{38:23,39:24,8:27,6:28,10:29,12:30,14:31,27:44,31:48,34:49,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),{6:51,7:$V0,54:50},{6:52,7:$V0},{6:56,7:$V0,8:57,9:$V1,10:54,11:$V2,56:53,57:55},o($Vi,$Vj,{29:$Vk,60:$Vl,61:$Vm}),o($Vn,[2,24]),o([1,7,9,11,13,15,17,24,25,29,40,41,60,61],$Vo,{35:[1,61],37:[1,62],43:$Vp,44:$Vq}),{29:$Vr,35:[1,65]},{6:28,7:$V0,24:[1,67],27:68},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:69,38:23,39:24,40:$V9},{6:70,7:$V0},o($Vs,[2,30]),o($Vs,[2,32]),{5:72,6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:71,24:$V6,27:44,31:43,34:17,38:23,39:24,40:$V9,49:5,50:6,51:7,52:$Va,53:$Vb,55:$Vc},{4:73,6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,16:4,18:8,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:18,30:$V7,31:16,33:$V8,34:17,36:19,38:23,39:24,40:$V9},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:74,38:23,39:24,40:$V9},o($Vt,[2,43]),o($Vs,[2,39]),o($Vs,[2,40]),o($Vs,[2,41]),o([7,11,13,15,24,40,58],[2,4]),o([1,7,9,11,13,15,17,24,25,29,32,33,35,37,40,41,43,44,45,52,55,59,60,61],[2,3]),o($Vs,[2,5]),o($Vs,[2,6]),o($Vs,[2,7]),o($Ve,[2,10],{18:8,19:9,20:10,21:11,22:12,31:16,34:17,27:18,36:19,38:23,39:24,8:27,6:28,10:29,12:30,14:31,16:75,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,23:$V5,24:$V6,30:$V7,33:$V8,40:$V9}),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,26:41,18:42,31:43,27:44,51:76,42:77,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9,55:$Vc}),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,26:41,18:42,31:43,27:44,42:78,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vf,[2,57]),o($Vf,[2,36]),o([1,17,25,32,41],[2,38],{38:23,39:24,8:27,6:28,10:29,12:30,14:31,27:44,31:48,34:49,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vn,$Vj,{60:$Vl,61:$Vm}),o($Vs,$Vo,{43:$Vp,44:$Vq}),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,26:41,18:42,31:43,27:44,42:79,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vf,[2,58]),o($Vf,[2,56]),o($Vn,[2,23],{60:$Vl,61:$Vm}),o($Vn,[2,25]),o([1,7,9,11,13,15,17,24,25,40,41,52,55],[2,60],{29:[1,80]}),o($Vu,[2,61]),o([1,7,9,11,13,15,17,24,25,40,41,55],[2,59]),o($Vi,[2,63],{29:[1,81]}),o($Vi,[2,64]),o($Vv,[2,70]),o($Vv,[2,65],{59:[1,82]}),{6:83,7:$V0,58:[1,84]},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:85,38:23,39:24,40:$V9},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:86,38:23,39:24,40:$V9},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:87,38:23,39:24,40:$V9},{5:89,6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:88,24:$V6,27:44,31:43,34:17,38:23,39:24,40:$V9,49:5,50:6,51:7,52:$Va,53:$Vb,55:$Vc},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:90,24:$V6,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:91,7:$V0},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:92,24:$V6,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:93,24:$V6,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:94,38:23,39:24,40:$V9},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,16:95,18:96,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:18,30:$V7,31:16,33:$V8,34:17,36:19,38:23,39:24,40:$V9},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,28:97,29:[1,98],31:99,36:100,38:23,39:24,40:$V9,43:$Vp,44:$Vq},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:42,24:$V6,26:101,27:44,31:43,34:17,38:23,39:24,40:$V9,60:$Vl,61:$Vm},{33:[1,102]},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,25:[1,103],27:44,31:48,34:49,38:23,39:24,40:$V9},{25:[1,104]},{17:$Vd,41:[1,105]},o($Vn,[2,42],{60:$Vl,61:$Vm}),o($Ve,[2,9]),o($Vf,$Vg,{34:17,38:23,39:24,8:27,6:28,10:29,12:30,14:31,26:41,18:42,31:43,27:44,42:106,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vf,[2,55]),o($Vf,[2,53]),o($Vf,[2,54]),{6:107,7:$V0},{6:56,7:$V0,8:57,9:$V1,57:108},{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:109,38:23,39:24,40:$V9},o($Vv,[2,66],{59:[1,110]}),o($Vv,[2,67]),o($Vw,[2,49],{60:$Vl,61:$Vm}),o([1,7,9,11,13,15,17,24,25,29,32,35,40,41,45,60],[2,72],{61:$Vm}),o($Vs,[2,73]),o($Vf,[2,26],{38:23,39:24,8:27,6:28,10:29,12:30,14:31,27:44,31:48,34:49,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vf,[2,28]),o($Vf,[2,29],{38:23,39:24,8:27,6:28,10:29,12:30,14:31,27:44,31:48,34:49,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vt,[2,45]),{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:48,34:49,38:23,39:24,40:$V9,45:[1,111]},o($Vf,[2,27],{38:23,39:24,8:27,6:28,10:29,12:30,14:31,27:44,31:48,34:49,7:$V0,9:$V1,11:$V2,13:$V3,15:$V4,24:$V6,40:$V9}),o($Vw,[2,50],{60:$Vl,61:$Vm}),{17:[1,112]},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,17:$Vh,24:$V6,25:$Vx,27:44,31:48,34:49,38:23,39:24,40:$V9},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:42,24:$V6,26:114,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:28,7:$V0,24:[1,116],27:115},o($Vy,[2,47],{29:$Vk,60:$Vl,61:$Vm}),o($Vy,[2,48],{29:$Vr}),o($Vf,[2,19],{32:[1,117]}),o($Vf,[2,21]),o($Vs,[2,33],{43:$Vz}),o($Vs,[2,34]),o($Vs,[2,35]),o($Vf,[2,52]),o($Vu,[2,62]),o($Vv,[2,71]),o($Vv,[2,68],{60:$Vl,61:$Vm}),{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,31:119,38:23,39:24,40:$V9},o($Vt,[2,46]),{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,16:120,18:8,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:18,30:$V7,31:16,33:$V8,34:17,36:19,38:23,39:24,40:$V9},{43:$Vz},o($Vf,[2,17]),{6:28,7:$V0,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,27:44,28:121,31:99,36:100,38:23,39:24,40:$V9,43:$Vp,44:$Vq},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:122,24:$V6,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:42,24:$V6,26:123,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:124,7:$V0},o($Vv,[2,69],{60:$Vl,61:$Vm}),{17:[1,125]},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:42,24:$V6,26:126,27:44,31:43,34:17,38:23,39:24,40:$V9},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,24:$V6,25:$Vx,27:44,31:48,34:49,38:23,39:24,40:$V9},o($Vf,[2,20]),o($Vt,[2,44]),{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,16:127,18:8,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:18,30:$V7,31:16,33:$V8,34:17,36:19,38:23,39:24,40:$V9},o($Vf,[2,18]),{25:[1,128]},{6:28,7:$V0,8:27,9:$V1,10:29,11:$V2,12:30,13:$V3,14:31,15:$V4,18:42,24:$V6,26:129,27:44,31:43,34:17,38:23,39:24,40:$V9},o($Vf,[2,16])],
defaultActions: {3:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return
break;
case 1:return 23
break;
case 2:return 30
break;
case 3:return 32
break;
case 4:yy_.yytext = yy_.yytext.replace(/\s/g, ''); return 15;
break;
case 5:yy_.yytext = yy_.yytext.replace(/^\s*"/, '').replace(/"\s*$/, ''); return 13;
break;
case 6:yy_.yytext = yy_.yytext.replace(/^\s*'/, '').replace(/'\s*$/, ''); return 13;
break;
case 7:yy_.yytext = yy_.yytext.replace(/\s/g, '').substr(0,yy_.yyleng-1); return 9
break;
case 8:yy_.yytext = yy_.yytext.replace(/\s/g, '');return 7
break;
case 9:return 43
break;
case 10:return 24
break;
case 11:return 25
break;
case 12:return 44
break;
case 13:return 45
break;
case 14:return 40
break;
case 15:return 41
break;
case 16:return 47
break;
case 17:return '|'
break;
case 18:return 55
break;
case 19:return 11
break;
case 20:return '>='
break;
case 21:return '<='
break;
case 22:return '=='
break;
case 23:return 37
break;
case 24:return '-='
break;
case 25:return '*='
break;
case 26:return '/='
break;
case 27:return 60
break;
case 28:return '-'
break;
case 29:return 58
break;
case 30:return '/'
break;
case 31:return '>'
break;
case 32:return 61
break;
case 33:return 35
break;
case 34:return 59
break;
case 35:return 52
break;
case 36:return 33
break;
case 37:return 53
break;
case 38:return 29
break;
case 39:return 17
break;
}
},
rules: [/^(?:\#[^\n\r]*[\n\r]+)/,/^(?:for)/,/^(?:if)/,/^(?:else)/,/^(?:(\s*)(-?(?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b(\s*))/,/^(?:(\s*)"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*"(\s*))/,/^(?:(\s*)'(?:(\\)['bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^'(\\)])*'(\s*))/,/^(?:(\s*)\$?([a-zA-Z])(([a-zA-Z])|([0-9]))*(\s*)\:)/,/^(?:(\s*)\$?([a-zA-Z])(([a-zA-Z])|([0-9]))*(\s*))/,/^(?:(\s*)\.(\s*))/,/^(?:(\s*)\((\s*))/,/^(?:(\s*)\)(\s*))/,/^(?:(\s*)\[(\s*))/,/^(?:(\s*)\](\s*))/,/^(?:(\s*)\{(\s*))/,/^(?:(\s*)\}(\s*))/,/^(?:(\s*)\&(\s*))/,/^(?:(\s*)\|(\s*))/,/^(?:(\s*)\@(\s*))/,/^(?:(\s*)\_(\s*))/,/^(?:(\s*)>=(\s*))/,/^(?:(\s*)<=(\s*))/,/^(?:(\s*)==(\s*))/,/^(?:(\s*)\+=(\s*))/,/^(?:(\s*)\-=(\s*))/,/^(?:(\s*)\*=(\s*))/,/^(?:(\s*)\/=(\s*))/,/^(?:(\s*)\+(\s*))/,/^(?:(\s*)\-(\s*))/,/^(?:(\s*)\*(\s*))/,/^(?:(\s*)\/(\s*))/,/^(?:(\s*)>(\s*))/,/^(?:(\s*)<(\s*))/,/^(?:(\s*)=(\s*))/,/^(?:(\s*)\?(\s*))/,/^(?:(\s*)\~(\s*))/,/^(?:(\s*)\`(\s*))/,/^(?:(\s*)\:(\s*))/,/^(?:(\s*),(\s*))/,/^(?:(\s*);(\s*))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}