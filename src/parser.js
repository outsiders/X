/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,36],$V2=[1,38],$V3=[1,37],$V4=[1,39],$V5=[1,19],$V6=[1,27],$V7=[1,20],$V8=[1,30],$V9=[1,22],$Va=[1,21],$Vb=[1,23],$Vc=[1,40],$Vd=[1,18,33,43],$Ve=[1,18,25,33,43],$Vf=[2,13],$Vg=[1,8,10,12,14,16,18,24,25,33,42,43],$Vh=[1,18,25,32,33,43,47],$Vi=[2,36],$Vj=[1,56],$Vk=[1,57],$Vl=[1,59],$Vm=[2,25],$Vn=[1,72],$Vo=[1,73],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,8,10,12,14,16,18,24,25,32,33,42,43,47,52,53,55],$Vx=[1,8,10,12,14,16,18,24,25,29,32,33,37,39,42,43,45,46,47,52,53,55,61,62,63,64,65,66,67,68],$Vy=[1,8,10,12,14,16,18,24,25,29,32,33,37,42,43,47,52,53,55,61,62,63,64,65,66,67,68],$Vz=[2,43],$VA=[1,8,10,12,14,16,18,24,25,29,33,42,43,52,55],$VB=[1,8,10,12,14,16,18,24,25,29,33,42,43],$VC=[1,8,10,12,14,16,18,24,25,29,33,37,42,43],$VD=[1,126],$VE=[8,10,12,14,16,24,42],$VF=[1,8,10,12,14,16,18,24,25,29,32,33,37,42,43,47,52,53,55,62,63,64,65,66,67,68],$VG=[1,136];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Artical":3,"Paragraph":4,"Definition":5,"Internal":6,"Id":7,"ID":8,"Property":9,"PROPERTY":10,"Null":11,"_":12,"String":13,"STRING":14,"Number":15,"NUMBER":16,"Sentence":17,";":18,"Units":19,"Assign":20,"For":21,"If":22,"FOR":23,"(":24,")":25,"FunctionBlock":26,"Assignable":27,"ArrayUnit":28,",":29,"IF":30,"Unit":31,"ELSE":32,"`":33,"PreUnits":34,"ContentDefinition":35,"PropertyUnit":36,"=":37,"Array":38,"+=":39,"Value":40,"Operation":41,"{":42,"}":43,":":44,".":45,"[":46,"]":47,"EmptyDefinition":48,"Dependencies":49,"ReturnStatement":50,"Arguments":51,"~":52,"&":53,"DependencyArray":54,"@":55,"ArgumentArray":56,"ArgumentElement":57,"*":58,"?":59,"=>":60,"+":61,"<":62,">":63,"==":64,">=":65,"<=":66,"&&":67,"||":68,"$accept":0,"$end":1},
terminals_: {2:"error",8:"ID",10:"PROPERTY",12:"_",14:"STRING",16:"NUMBER",18:";",23:"FOR",24:"(",25:")",29:",",30:"IF",32:"ELSE",33:"`",37:"=",39:"+=",42:"{",43:"}",44:":",45:".",46:"[",47:"]",52:"~",53:"&",55:"@",58:"*",59:"?",60:"=>",61:"+",62:"<",63:">",64:"==",65:">=",66:"<=",67:"&&",68:"||"},
productions_: [0,[3,1],[3,1],[3,1],[3,2],[7,1],[9,1],[11,1],[13,1],[15,1],[4,1],[4,3],[4,2],[17,1],[17,1],[17,1],[17,1],[21,9],[21,4],[21,6],[22,3],[22,5],[6,3],[19,1],[19,2],[34,1],[34,2],[34,1],[34,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[26,1],[40,1],[40,1],[40,1],[36,2],[36,3],[27,1],[27,5],[27,3],[27,4],[28,1],[28,1],[38,3],[38,3],[5,1],[5,1],[35,2],[48,3],[48,2],[48,2],[48,2],[48,1],[48,1],[48,1],[50,2],[49,2],[54,1],[54,3],[51,2],[51,2],[57,1],[57,2],[57,2],[57,3],[57,4],[57,3],[56,1],[56,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3],[41,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = ['_main', $$[$0]]
break;
case 2:
return this.$ = $$[$0];
break;
case 3:
return this.$ = ['_main', []];
break;
case 4:
return this.$ = ['_main', $$[$0]];
break;
case 5: case 6:
this.$ = yytext
break;
case 7:
this.$ = ['_null']
break;
case 8:
this.$ = ['_string', yytext]
break;
case 9:
this.$ = ['_number', Number(yytext)]
break;
case 10:
if($$[$0]) this.$ = ['_paragraph', [$$[$0]]]; else this.$ = ['_paragraph', []];
break;
case 11:
this.$ = $$[$0-2]; if($$[$0]){$$[$0-2][1].push($$[$0]);}
break;
case 12: case 38: case 39: case 40:
this.$ = $$[$0-1];
break;
case 13: case 14: case 15: case 16: case 37: case 65: case 66:
this.$ = $$[$0];
break;
case 17:
this.$ = ['_for', {start: $$[$0-6], end: $$[$0-4], inc: $$[$0-2], content: $$[$0]}]
break;
case 18:
this.$ = ['_foreach', {array: $$[$0-1], element: $$[$0-2], content: $$[$0]}]
break;
case 19:
this.$ = ['_foreach', {array: $$[$0-1], element: $$[$0-4], index: $$[$0-2], content: $$[$0]}]
break;
case 20:
this.$=['_if', {condition:$$[$0-1], content:$$[$0]}]
break;
case 21:
this.$=['_if',{condition: $$[$0-3], content: $$[$0-2], else: $$[$0]}]
break;
case 22:
yy.eval($$[$0-1][1]); this.$ = undefined
break;
case 23: case 35: case 36: case 42: case 43: case 44: case 51: case 52:
this.$ = $$[$0]
break;
case 24: case 26:
this.$ = $$[$0-1]; $$[$0-1][1].content.push($$[$0])
break;
case 25:
this.$ = ['_sentence', {config:{},content: [$$[$0]]}];
break;
case 27:
this.$ = ['_sentence', {config: {}, content: []}]; this.$[1].config[$$[$0][0]] = $$[$0][1];
break;
case 28:
this.$ = $$[$0-1]; $$[$0-1][1].config[$$[$0][0]] = $$[$0][1]
break;
case 29: case 30: case 31: case 32:
this.$ = ['_assign', [$$[$0-2], $$[$0]]];
break;
case 33:
this.$ = ['_assign', [$$[$0-2], $$[$0]]]
break;
case 34:
this.$ = ['_assign', [$$[$0-2], ['_op', ['add', $$[$0-2], $$[$0]]]]];
break;
case 41:
var c = $$[$0][1].content; if(c.length == 1 && c[0][0] == '_paragraph'){ this.$ = c[0]; }else{ this.$ = ['_paragraph', [$$[$0]]]; }
break;
case 45:
this.$ = [$$[$0-1], $$[$0]]
break;
case 46:
this.$ = [$$[$0-2], $$[$0]]
break;
case 47:
this.$ = ['_access', [$$[$0]]]
break;
case 48:
this.$ = ['_access', [$$[$0-3], $$[$0]]]
break;
case 49:
this.$ = ['_access', [$$[$0-2], $$[$0]]]
break;
case 50:
this.$ = ['_access', [$$[$0-3], $$[$0-1]]]
break;
case 53:
this.$ = ['_array', [$$[$0-2], $$[$0]]]
break;
case 54:
this.$ = $$[$0-2]; $$[$0-2][1].push($$[$0])
break;
case 55:
this.$=$$[$0];$$[$0][1].content = []
break;
case 56:
this.$=$$[$0]
break;
case 57:
this.$= $$[$0-1];$$[$0-1][1].content = $$[$0];
break;
case 58:
this.$ = ['_definiton', {deps: $$[$0-2], return: $$[$0-1], args: $$[$0]}]
break;
case 59:
this.$ = ['_definiton', {deps: $$[$0-1], args: $$[$0]}]
break;
case 60:
this.$ = ['_definiton', {deps: {function: 1}, return: $$[$0-1], args: $$[$0]}]
break;
case 61:
this.$ = ['_definiton', {deps: $$[$0-1], return: $$[$0], args: {}}]
break;
case 62:
this.$ = ['_definiton', {deps: {function: 1}, args: $$[$0]}]
break;
case 63:
this.$ = ['_definiton', {deps: $$[$0], args: {}}]
break;
case 64:
this.$ = ['_definiton', {deps: {function:1}, return: $$[$0], args: {}}]
break;
case 67:
this.$ = {}; this.$[$$[$0]] = 1
break;
case 68:
this.$ = $$[$0-2]; $$[$0-2][$$[$0]] = 1
break;
case 69:
this.$=$$[$0];
break;
case 70:
this.$ = {}
break;
case 71:
this.$ = [$$[$0], {}]
break;
case 72:
this.$ = [$$[$0-1], {type: $$[$0]}]
break;
case 73:
this.$ = [$$[$0-1], {etc: 1}]
break;
case 74:
this.$ = [$$[$0-2], {default: $$[$0]}]
break;
case 75:
this.$ = [$$[$0-3], {type: $$[$0-2], default: $$[$0]}]
break;
case 76:
this.$ = [$$[$0-2], {default: $$[$0], static: 1}]
break;
case 77:
this.$={}; this.$[$$[$0][0]] = $$[$0][1];
break;
case 78:
this.$=$$[$0-2]; this.$[$$[$0][0]] = $$[$0][1]
break;
case 79:
this.$ = ['_op', ['add', $$[$0-2], $$[$0]]]
break;
case 80:
this.$ = ['_op', ['lt', $$[$0-2], $$[$0]]]
break;
case 81:
this.$ = ['_op', ['gt', $$[$0-2], $$[$0]]]
break;
case 82:
this.$ = ['_op', ['eq', $$[$0-2], $$[$0]]]
break;
case 83:
this.$ = ['_op', ['ge', $$[$0-2], $$[$0]]]
break;
case 84:
this.$ = ['_op', ['le', $$[$0-2], $$[$0]]]
break;
case 85:
this.$ = ['_op', ['and', $$[$0-2], $$[$0]]]
break;
case 86:
this.$ = ['_op', ['or', $$[$0-2], $$[$0]]]
break;
}
},
table: [{3:1,4:2,5:3,6:4,7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:5,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,33:[1,8],34:16,35:7,36:25,38:18,40:28,41:29,42:$V8,48:6,49:13,50:14,51:15,52:$V9,53:$Va,55:$Vb},{1:[3]},{1:[2,1],18:$Vc},{1:[2,2]},{1:[2,3],4:41,7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:5,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,34:16,36:25,38:18,40:28,41:29,42:$V8},o($Vd,[2,10]),o($Ve,[2,55],{34:16,36:25,7:26,40:28,41:29,9:31,13:32,11:34,15:35,26:42,19:43,31:44,27:45,8:$V0,10:$V1,12:$V2,14:$V3,16:$V4,24:$V6,42:$V8}),o($Ve,[2,56]),{4:46,7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:5,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,34:16,36:25,38:18,40:28,41:29,42:$V8},o($Ve,$Vf),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Vg,[2,63],{50:47,51:48,52:$V9,55:$Vb}),o($Vg,[2,64],{51:49,55:$Vb}),o($Vg,[2,62]),o($Vh,[2,23],{49:13,50:14,51:15,7:26,40:28,41:29,9:31,13:32,11:34,15:35,27:45,35:50,31:51,36:52,48:53,8:$V0,10:$V1,12:$V2,14:$V3,16:$V4,24:$V6,42:$V8,52:$V9,53:$Va,55:$Vb}),o([1,8,10,12,14,16,18,24,25,29,33,42,43,52,53,55,61,62,63,64,65,66,67,68],$Vi,{37:[1,54],39:[1,55],45:$Vj,46:$Vk}),{29:$Vl,37:[1,58]},{7:26,8:$V0,24:[1,60],27:61},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:62,40:28,41:29,42:$V8},{7:65,8:$V0,54:64},{7:66,8:$V0},{7:70,8:$V0,9:71,10:$V1,11:68,12:$V2,56:67,57:69},o([1,8,10,12,14,16,18,24,25,33,42,43,52,53,55],$Vm,{29:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,27]),o($Vx,[2,47]),{5:82,7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:81,24:$V6,27:45,31:44,34:16,35:7,36:25,40:28,41:29,42:$V8,48:6,49:13,50:14,51:15,52:$V9,53:$Va,55:$Vb},o($Vy,[2,35]),o($Vy,[2,37]),{4:83,7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:5,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,34:16,36:25,38:18,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:84,40:28,41:29,42:$V8},o([1,8,10,12,14,16,18,24,25,29,32,33,42,43,47,52,53,55,61,62,63,64,65,66,67,68],$Vz,{44:[1,85]}),o([1,8,10,12,14,16,18,24,25,29,32,33,37,39,42,43,45,46,47,52,53,55,59,60,61,62,63,64,65,66,67,68],[2,5]),o($Vy,[2,42]),o($Vy,[2,44]),o([8,12,14,16,24,42,58,59],[2,6]),o([1,8,10,12,14,16,18,24,25,29,32,33,37,42,43,44,47,52,53,55,61,62,63,64,65,66,67,68],[2,8]),o($Vy,[2,7]),o($Vy,[2,9]),o($Vd,[2,12],{19:9,20:10,21:11,22:12,34:16,27:17,38:18,31:24,36:25,7:26,40:28,41:29,9:31,13:32,11:34,15:35,17:86,8:$V0,10:$V1,12:$V2,14:$V3,16:$V4,23:$V5,24:$V6,30:$V7,42:$V8}),{1:[2,4],18:$Vc},o($Vh,[2,57]),o($Vh,[2,41]),o($Vw,$Vm,{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vy,$Vi,{45:$Vj,46:$Vk}),{18:$Vc,33:[1,87]},o($Vg,[2,61],{51:88,55:$Vb}),o($Vg,[2,59]),o($Vg,[2,60]),o($Vh,[2,24]),o($Vw,[2,26],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,28]),{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:43,24:$V6,26:42,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},{5:91,7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:89,24:$V6,27:45,31:24,34:16,35:7,36:25,38:90,40:28,41:29,42:$V8,48:6,49:13,50:14,51:15,52:$V9,53:$Va,55:$Vb},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:92,24:$V6,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},{7:93,8:$V0},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:94,24:$V6,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:95,24:$V6,27:45,31:24,34:16,36:25,38:96,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:97,40:28,41:29,42:$V8},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:98,19:99,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,34:16,36:25,38:18,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,28:100,29:[1,101],31:102,38:103,40:28,41:29,42:$V8,45:$Vj,46:$Vk},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:43,24:$V6,26:104,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},o($Vy,$Vz),o([1,8,10,12,14,16,18,24,25,33,42,43,52,55],[2,66],{29:[1,105]}),o($VA,[2,67]),o([1,8,10,12,14,16,18,24,25,33,42,43,55],[2,65]),o($Vg,[2,69],{29:[1,106]}),o($Vg,[2,70]),o($VB,[2,77]),o($VB,[2,71],{60:[1,107]}),{7:108,8:$V0,58:[1,109],59:[1,110]},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:111,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:112,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:113,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:114,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:115,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:116,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:117,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:118,40:28,41:29,42:$V8},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:119,40:28,41:29,42:$V8},{25:[1,120]},{25:[1,121]},{18:$Vc,43:[1,122]},o($Vw,[2,45],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:123,40:28,41:29,42:$V8},o($Vd,[2,11]),o([1,8,10,12,14,16,23,24,30,42],[2,22]),o($Vg,[2,58]),o($Ve,[2,29]),o($Ve,[2,30],{29:$Vl}),o($Ve,[2,33]),o($Ve,[2,34]),o($Vx,[2,49]),{47:[1,124]},o($Ve,[2,31]),o($Ve,[2,32],{29:$Vl}),o($VC,[2,54],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),{18:[1,125]},{18:$Vf,25:$VD},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:43,24:$V6,26:127,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},{7:26,8:$V0,24:[1,129],27:128},o($VE,[2,51],{29:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VE,[2,52],{29:$Vl}),o($Ve,[2,20],{32:[1,130]}),{7:131,8:$V0},{7:70,8:$V0,9:71,10:$V1,57:132},{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:133,40:28,41:29,42:$V8},o($VB,[2,72],{59:[1,134]}),o($VB,[2,73]),{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:135,40:28,41:29,42:$V8},o($VC,[2,53],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vy,[2,79]),o($VF,[2,80],{61:$Vo}),o($VF,[2,81],{61:$Vo}),o([1,8,10,12,14,16,18,24,25,29,32,33,37,42,43,47,52,53,55,64,67,68],[2,82],{61:$Vo,62:$Vp,63:$Vq,65:$Vs,66:$Vt}),o($VF,[2,83],{61:$Vo}),o($VF,[2,84],{61:$Vo}),o([1,8,10,12,14,16,18,24,25,29,32,33,37,42,43,47,52,53,55,67,68],[2,85],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt}),o([1,8,10,12,14,16,18,24,25,29,32,33,37,42,43,47,52,53,55,68],[2,86],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu}),o($Vy,[2,38],{45:$VG}),o($Vy,[2,39]),o($Vy,[2,40]),o($Vw,[2,46],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vx,[2,50]),{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:137,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,34:16,36:25,38:18,40:28,41:29,42:$V8},{45:$VG},o($Ve,[2,18]),{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,28:138,31:102,38:103,40:28,41:29,42:$V8,45:$Vj,46:$Vk},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:139,24:$V6,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:43,24:$V6,26:140,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},o($VA,[2,68]),o($VB,[2,78]),o($VB,[2,76],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),{7:26,8:$V0,11:34,12:$V2,13:63,14:$V3,15:35,16:$V4,24:$V6,27:45,31:141,40:28,41:29,42:$V8},o($VB,[2,74],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),{7:142,8:$V0},{18:[1,143]},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:43,24:$V6,26:144,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},{25:$VD},o($Ve,[2,21]),o($VB,[2,75],{61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vx,[2,48]),{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,17:145,19:9,20:10,21:11,22:12,23:$V5,24:$V6,27:17,30:$V7,31:24,34:16,36:25,38:18,40:28,41:29,42:$V8},o($Ve,[2,19]),{25:[1,146]},{7:26,8:$V0,9:31,10:$V1,11:34,12:$V2,13:32,14:$V3,15:35,16:$V4,19:43,24:$V6,26:147,27:45,31:44,34:16,36:25,40:28,41:29,42:$V8},o($Ve,[2,17])],
defaultActions: {3:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return
break;
case 1:return 23
break;
case 2:return 30
break;
case 3:return 32
break;
case 4:yy_.yytext = yy_.yytext.replace(/\s/g, ''); return 16;
break;
case 5:yy_.yytext = yy_.yytext.replace(/^\s*"/, '').replace(/"\s*$/, ''); return 14;
break;
case 6:yy_.yytext = yy_.yytext.replace(/^\s*'/, '').replace(/'\s*$/, ''); return 14;
break;
case 7:yy_.yytext = yy_.yytext.replace(/^\s*/, '').replace(/\s*:$/g, ''); return 10
break;
case 8:yy_.yytext = yy_.yytext.replace(/\s/g, '');return 8
break;
case 9:return 67
break;
case 10:return 68
break;
case 11:return 65
break;
case 12:return 66
break;
case 13:return 64
break;
case 14:return '!='
break;
case 15:return '!'
break;
case 16:return 39
break;
case 17:return '-='
break;
case 18:return '*='
break;
case 19:return '/='
break;
case 20:return '->'
break;
case 21:return 60
break;
case 22:return 53
break;
case 23:return '|'
break;
case 24:return 55
break;
case 25:return 12
break;
case 26:return 45
break;
case 27:return 24
break;
case 28:return 25
break;
case 29:return 46
break;
case 30:return 47
break;
case 31:return 42
break;
case 32:return 43
break;
case 33:return 61
break;
case 34:return '-'
break;
case 35:return 58
break;
case 36:return '/'
break;
case 37:return 63
break;
case 38:return 62
break;
case 39:return 37
break;
case 40:return 59
break;
case 41:return '%'
break;
case 42:return 52
break;
case 43:return 33
break;
case 44:return 44
break;
case 45:return 29
break;
case 46:return 18
break;
}
},
rules: [/^(?:\#[^\n\r]*[\n\r]+)/,/^(?:for)/,/^(?:if)/,/^(?:else)/,/^(?:(\s*)(-?(?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b(\s*))/,/^(?:(\s*)"(?:(\\)["bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^"(\\)])*"(\s*))/,/^(?:(\s*)'(?:(\\)['bfnrt/(\\)]|(\\)u[a-fA-F0-9]{4}|[^'(\\)])*'(\s*))/,/^(?:(\s*)\$?([a-zA-Z_])(([a-zA-Z_])|([0-9]))*(\s*)\:)/,/^(?:(\s*)\$?([a-zA-Z_])(([a-zA-Z_])|([0-9]))*(\s*))/,/^(?:(\s*)\&\&(\s*))/,/^(?:(\s*)\|\|(\s*))/,/^(?:(\s*)>=(\s*))/,/^(?:(\s*)<=(\s*))/,/^(?:(\s*)==(\s*))/,/^(?:(\s*)\!=(\s*))/,/^(?:(\s*)\!(\s*))/,/^(?:(\s*)\+=(\s*))/,/^(?:(\s*)\-=(\s*))/,/^(?:(\s*)\*=(\s*))/,/^(?:(\s*)\/=(\s*))/,/^(?:(\s*)->(\s*))/,/^(?:(\s*)=>(\s*))/,/^(?:(\s*)\&(\s*))/,/^(?:(\s*)\|(\s*))/,/^(?:(\s*)\@(\s*))/,/^(?:(\s*)\_(\s*))/,/^(?:(\s*)\.(\s*))/,/^(?:(\s*)\((\s*))/,/^(?:(\s*)\)(\s*))/,/^(?:(\s*)\[(\s*))/,/^(?:(\s*)\](\s*))/,/^(?:(\s*)\{(\s*))/,/^(?:(\s*)\}(\s*))/,/^(?:(\s*)\+(\s*))/,/^(?:(\s*)\-(\s*))/,/^(?:(\s*)\*(\s*))/,/^(?:(\s*)\/(\s*))/,/^(?:(\s*)>(\s*))/,/^(?:(\s*)<(\s*))/,/^(?:(\s*)=(\s*))/,/^(?:(\s*)\?(\s*))/,/^(?:(\s*)\%(\s*))/,/^(?:(\s*)\~(\s*))/,/^(?:(\s*)\`(\s*))/,/^(?:(\s*)\:(\s*))/,/^(?:(\s*),(\s*))/,/^(?:(\s*);(\s*))/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}